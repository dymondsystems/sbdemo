document.addEventListener('DOMContentLoaded', () => {
  loadSections();


  // Add new section
  document.getElementById('addSectionBtn').addEventListener('click', () => {
    const sectionTitle = document.getElementById('sectionTitle').value.trim();
    if (sectionTitle) {
      const sections = JSON.parse(localStorage.getItem('sections')) || [];
      const sectionId = `section-${Date.now()}`;
      sections.push({ id: sectionId, title: sectionTitle });
      localStorage.setItem('sections', JSON.stringify(sections));
      document.getElementById('sectionTitle').value = '';
       loadSections(); // Update main content
    
    } else {
      showAlert('Please enter a section title.', 'warning');
    }
  });


  // Set up event listener for rename modal save button
  document.getElementById('saveRenameBtn').addEventListener('click', () => {
    const sectionId = document.getElementById('renameModal').dataset.sectionId;
    const newTitle = document.getElementById('renameInput').value.trim();
    if (newTitle) {
      const sections = JSON.parse(localStorage.getItem('sections')) || [];
      const section = sections.find(sec => sec.id === sectionId);


      if (section) {
        section.title = newTitle;
        localStorage.setItem('sections', JSON.stringify(sections));
        document.getElementById(`title-${sectionId}`).textContent = newTitle;
        loadSections(); // Ensure sidebar is refreshed correctly
        showAlert('Section renamed successfully!', 'success');
      }


      $('#renameModal').modal('hide');
    } else {
      showAlert('Section title cannot be empty!', 'danger');
    }
  });
});


// Load sections and render them
function loadSections() {
  const sectionsContainer = document.getElementById('sectionsContainer');
  const sections = JSON.parse(localStorage.getItem('sections')) || [];
 const placeholder = document.getElementById('noSectionsPlaceholder'); 
 
  // Show placeholder if no sections exist, otherwise hide it
  if (sections.length === 0) {
    placeholder.style.display = 'block';
  } else {
    placeholder.style.display = 'none';
  }
 
 sectionsContainer.innerHTML = ''; // Clear existing sections
  sidebarLinksContainer.innerHTML = ''; // Clear sidebar links
 
 
 


  sections.forEach(section => {
    const sectionDiv = document.createElement('div');
    sectionDiv.classList.add('section-container', 'mb-4');
    sectionDiv.id = section.id;
    sectionDiv.innerHTML = `
      <hr>
      <div class="d-flex justify-content-between align-items-center">
        <h3 id="title-${section.id}">${section.title}</h3>
        <div class="dropdown">
          <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton-${section.id}" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Actions
          </button>
          <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton-${section.id}">
	   <a class="dropdown-item" href="/cardbetav1/boardv4/addcard/?sectionId=${section.id}"> <i class="fas fa-plus"></i> Add app </a>
            <a class="dropdown-item" href="#" onclick="openRenameModal('${section.id}', '${section.title}')"><i class="fas fa-edit"></i> Rename </a>
	   
            <a class="dropdown-item text-danger" href="#" onclick="removeSection('${section.id}')"><i class="fas fa-trash-alt"></i> Remove </a>
          </div>
        </div>
      </div>
      <div class="row" id="cards-${section.id}">
        <!-- Cards will be dynamically inserted here -->
      
      </div>
     <div id="noCardsPlaceholder2" class="alert alert-info text-center" style="display: none; margin-top: 50px; margin-bottom: 150px; ">
     <h4>You've created your first stack!</h4>
  Add an app to start building out your stack.
  <br>
  <a href="/cardbetav1/boardv4/addcard/?sectionId=${section.id}" class="btn btn-success" role="button">Add app</a>
  </div>
    `;
    sectionsContainer.appendChild(sectionDiv);




// Populate the sidebar with a link to the section
    const sidebarLink = document.createElement('li');
    sidebarLink.innerHTML = `
      <a href="#${section.id}">
         ${section.title}
      </a>
    `;
    sidebarLinksContainer.appendChild(sidebarLink);


 
 


    // Make cards sortable within each section
    new Sortable(document.getElementById(`cards-${section.id}`), {
      group: 'shared',
      animation: 150,
      onEnd: saveCardsToLocalStorage,
    });
  });


  loadCards(); // Re-render cards
  
}


// Open rename modal and populate it with section data
function openRenameModal(sectionId, sectionTitle) {
  document.getElementById('renameModal').dataset.sectionId = sectionId;
  document.getElementById('renameInput').value = sectionTitle;
  $('#renameModal').modal('show');
}


// Save cards to localStorage
function saveCardsToLocalStorage() {
  const sections = JSON.parse(localStorage.getItem('sections')) || [];
  const allCards = [];
  sections.forEach(section => {
    const cardContainer = document.getElementById(`cards-${section.id}`);
    cardContainer.querySelectorAll('.card-item').forEach(card => {
      const cardData = {
        id: card.dataset.id,
        title: card.dataset.title,
        image: card.dataset.image,
        description: card.dataset.description,
        sectionId: section.id,
        category: card.dataset.category,
      };
      allCards.push(cardData);
    });
  });
  localStorage.setItem('addedCards', JSON.stringify(allCards));
}


// Show alert
function showAlert(message, type) {
  const alertContainer = document.getElementById('alertContainer');
  const alert = document.createElement('div');
  alert.className = `alert alert-${type} alert-dismissible fade show`;
  alert.innerHTML = `
    ${message}
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
      <span aria-hidden="true">&times;</span>
    </button>
  `;
  alertContainer.appendChild(alert);


  setTimeout(() => {
    $(alert).alert('close');
  }, 3000);
}
